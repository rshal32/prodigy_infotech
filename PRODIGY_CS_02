
from PIL import Image
import numpy as np
import os

def encrypt_image(image_path, output_path):
    try:
        # Open the image and convert it to RGB
        image = Image.open(image_path).convert("RGB")
        image_array = np.array(image, dtype=np.uint8)  # Ensure the array is of type uint8

        # Encrypt by adding 50 to each pixel value
        encrypted_array = (image_array.astype(np.uint16) + 50) % 256  # Use uint16 to prevent overflow
        encrypted_array = encrypted_array.astype(np.uint8)  # Convert back to uint8

        encrypted_image = Image.fromarray(encrypted_array)
        encrypted_image.save(output_path)
        print(f"Encrypted image saved as {output_path}")
    except FileNotFoundError:
        print(f"Error: The file '{image_path}' was not found.")
    except Exception as e:
        print(f"An error occurred during encryption: {e}")

def decrypt_image(image_path, output_path):
    try:
        # Open the image
        image = Image.open(image_path)
        image_array = np.array(image, dtype=np.uint8)  # Ensure the array is of type uint8

        # Decrypt by subtracting 50 from each pixel value
        decrypted_array = (image_array.astype(np.uint16) - 50) % 256  # Use uint16 to prevent overflow
        decrypted_array = decrypted_array.astype(np.uint8)  # Convert back to uint8

        decrypted_image = Image.fromarray(decrypted_array)
        decrypted_image.save(output_path)
        print(f"Decrypted image saved as {output_path}")
    except FileNotFoundError:
        print(f"Error: The file '{image_path}' was not found.")
    except Exception as e:
        print(f"An error occurred during decryption: {e}")

def main():
    while True:
        mode = input("Enter mode (encrypt/decrypt) or 'exit' to quit: ").strip().lower()
        if mode == 'exit':
            break
        if mode not in ['encrypt', 'decrypt']:
            print("Invalid mode! Please enter 'encrypt' or 'decrypt'.")
            continue

        # Prompt for file paths and remove any surrounding quotes
        image_path = input("Enter the path of the image: ").strip().strip('"')
        output_path = input("Enter the output path for the processed image (including file name and extension): ").strip().strip('"')

        # Check if the input file path is valid
        if not os.path.isfile(image_path):
            print(f"Error: The file '{image_path}' does not exist.")
            continue

        if mode == 'encrypt':
            encrypt_image(image_path, output_path)
        elif mode == 'decrypt':
            decrypt_image(image_path, output_path)

if __name__ == "__main__":
    main()
